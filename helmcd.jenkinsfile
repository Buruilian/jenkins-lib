@Library("mylib@feature-k8s") _
import org.devops.*               // 导入库

def gitcli = new Gitlab()
def deploy = new Deploy()

env.projectName = "${JOB_NAME}".split("_")[0]
env.buName = "${JOB_NAME}".split("-")[0]
env.serviceName = "${JOB_NAME}".split("_")[0]

pipeline {
	agent {
		label "build"
	}

	options {
		skipDefaultCheckout true
	}

	stages {
		stage("Checkout"){
            steps{
                script {            
                    println("GetCode")
                    sh "[ -d ${env.serviceName} ] || mkdir ${env.serviceName}"
                    ws("${WORKSPACE}/${env.serviceName}"){
                        checkout([$class: 'GitSCM', 
                                branches: [[name: "${env.branchName}"]], 
                                extensions: [], 
                                userRemoteConfigs: [[credentialsId: 'f32d37bd-de73-43e3-b7ca-7fcd707de1f8', 
                                                    url: "${env.srcUrl}"]]])
                        env.commitID = gitcli.GetCommitID()
                        currentBuild.description = """ branchName: ${env.branchName} \n"""
                        currentBuild.displayName = "${env.commitID}"
                    }
                }
            }
        }

        stage("HelmDeploy"){
            steps{
                container("helm"){
                    script{
                        env.namespace = "${env.buName}"
                        env.appName = "${env.serviceName}"
                        currentBuild.description = "NS: ${env.namespace}"
                      
                        //Helm 发布
                        sh """
                            helm package "${env.appName}/" 
                            helm upgrade --install --create-namespace  "${env.appName}" ./"${env.appName}"-*.tgz -n ${env.namespace} 
                            helm history "${env.appName}"  -n ${env.namespace} 
                        """ 
 
                        //获取release的历史版本   
                        env.revision = sh returnStdout: true, script: """helm history ${env.appName} -n ${env.namespace}  | grep -v 'REVISION' | awk '{print \$1}' """
                        println("${env.revision}")
                        println("${env.revision.split('\n').toString()}")
                        env.REVISION = "${env.revision.split('\n').toString()}"
                        println("${env.REVISION}")
 
                        // 获取应用状态
                        5.times{
                            sh "sleep 2; kubectl -n ${env.namespace} get pod  | grep ${env.appName}"
                        }
                    }
                }
            }
        }

        stage("CheckHealth"){
            steps{
                script{
                    result = sh returnStdout: true, script: """ curl "http://${env.domainName}/health" """
                    if (result == "ok") {
                        println("success!")
                    }
                }
            }
        }
	}
}
