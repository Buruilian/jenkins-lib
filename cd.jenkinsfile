@Library("mylib@main") _
import org.devops.*

def gitcli = new Gitlab()
def artifact = new Artifact()

env.projectName = "${JOB_NAME}".split("_")[0]
env.buName = "${JOB_NAME}".split("-")[0]
env.serviceName = "${JOB_NAME}".split("_")[0]

pipeline {
    agent {
        label "build"
    }
    
    options {
        skipDefaultCheckout true
    }

    stages {
        stage("PullArtifact"){
            steps {
                script {
                    projectID = gitcli.GetProjectID("${env.serviceName}", "${env.buName}")
                    commitID = gitcli.GetBranchCommitID(projectID, "${env.branchName}")
                    path = "${env.buName}/${env.serviceName}/${env.branchName}-${commitID}"
                    env.pkgName = "${env.serviceName}-${env.branchName}-${commitID}.jar"
                    artifact.PullArtifact(path, pkgName)
                }
            }
        }

        stage("AnsibleDeploy"){
            steps {
                script {
                    println("deploy ${env.envList}")
                    //将主机写入清单文件
                    sh "rm -f hosts"
                    for (host in "${env.deployHosts}".split(",")) {
                        sh "echo ${host} >> hosts"
                    }
                    sh "cat hosts"

                    // ansible发布
                    sh """
                        # 主机连通性检测
                        ansible "${env.deployHosts}" -m ping -i hosts

                        # 清理和创建发布目录
                        ansible "${env.deployHosts}" -m shell -a "rm -rf ${env.targetDir}/${env.projectName}/* && mkdir -p ${env.targetDir}/${env.projectName} || echo file is exists"

                        # 复制app
                        ansible "${env.deployHosts}" -m copy -a "src=${env.pkgName} dest=${env.targetDir}/${env.projectName}/${env.pkgName}"
                    """

                    fileData = libraryResource 'scripts/service.sh'

                    writeFile file: 'service.sh', text: fileData
                    sh "ls -a; cat service.sh"
                }
            }
        }
    }
}






